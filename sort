//直接插入排序 类似摸牌理牌的过程
void insertSort (int arr[], int n)
{
	int temp,i,j;
	for (i = 1;i < n; ++i)
	{
		temp = arr[i]; // i 为待排序元素位置
		j = i-1; // i之前的为已排序好的部分 j为排序好的部分的最右侧
		while(j >= 0 && temp < arr[j] )
		{
			arr[j+1] = arr[j];
			--j;
		}
		arr[j+1] = temp ;
	}
}

//简单选择排序 每次循环选择出最小值 放在已排序序列的最后
void selectSort (int arr[], int n)
{
	int i,j,k;
	int temp;
	for (i = 0;i < n;++i)
	{
		k = i;
		for (j=j+1;j<n;++j)	//求出arr中的最小值
			if(arr[k] > arr[j])
				k = j;
		temp = arr[i];
		arr[i] = arr[k];
		arr[k] = temp ; //交换 k，i位置值 将k记录的最小值放在i处
	}
}

//冒泡排序 大数沉底 小数上浮
void bubleSort(int arr[], int n)
{
	int i,j,flag;
	int temp;
	for (i = n-1;i >= 1; --i)// i为未排序最末序号，每沉底一个大数，i向前移一位
	{
		flag = 0;
		for (j = 1; j <= i; ++j)
			if(arr[j-1] > arr[j])
			{
				temp = arr[j];
				arr[j] = arr[j-1];
				arr[j-1] = temp ;
				
				flag = 1; //标记是否发生交换
			}
		if (flag == 0)
			return ;//如果没有发生交换 结束排序
	}
}

// 希尔排序 （插入类的排序）
// 按照希尔数取出子序列 对子序列进行简单插入排序 然后希尔数除以2  再取子序列
// 比直接插入排序快 证明自行百度学习
// 希尔数为1 即为直接插入排序
void shellSort(int arr[],int n)
{
	int temp;
	for (int gap = n/2 ; gap > 0; gap /= 2)
	{
		for (int i = gap; i < n ; ++i)
		{
			temp = arr[i];
			int j;
			for (j = i; j >= gap && arr[j-gap] > temp; j -= gap)
				arr[j] = arr[j-gap] ;
			arr[j] = temp ;
		}
	}
}
	
// 快速排序 
// 第一步 以第一个元素作为划分 左边都比他小 右边的都比他大
// 然后递归 就可以排序了
// // low =0  high = arr的最高位置
void quickSort(int arr[], int low, int high) 
{
	int temp;// temp记录划分的那个元素
	int i = low, j = high ;
	if (low < high )
	{
		temp = arr[low];
		while (i < j)
		{
			while (i < j && arr[j] >= temp ) --j ;
			
			if (i < j)
			{
				arr[i] = arr[j];
				++i;
			}
			
			while (i < j && arr[i] >= temp ) ++i ;
			
			if (i < j)
			{
				arr[j] = arr[i];
				--j;
			}
		}
		arr[i] = temp;
		quickSort(arr,low,i-1);
		quickSort(arr,i+1,high);
	}
}
				
// 堆排序 （简单选择排序的升级版本 利用堆找到最大or最小值）
// 大顶堆 小顶堆 是完全二叉树 
// 用顺序存储结构存储  根节点 从0开始存储 父节点位置i 其左孩子 2i+1 右孩子 2i+2 
// 最后一个非叶子节点编号 n/2向下取整 - 1

void heapSort(int arr[],int n)
{
	int i ;
	int temp ;
	for (i = n/2-1; i >= 0; --i ) //从最后一个非叶子节点开始 
		sift(arr,i,i-1);
	for (i = n-1; i>0; --i)
	{
		temp = arr[0];
		arr[0] = arr[i];
		arr[i] = temp ;
		sift(arr,0,i-1);
	}
}

void sift(int arr[], int low, int high)
{
	i = low, j = 2*i+1;//j为i的左儿子
	int temp = arr[i];
	while (j <= high)
	{
		if (j <high && arr[j] < arr[j+1])//j在数组内且i有右儿子 判断左儿子和右儿子大小
			++j;//若右儿子大 j指向右儿子
		if (temp < arr [j])
		{
			arr[i] = arr[j] ;
			i = j ;
			j = 2*i + 1;
		}
		else 
			break;
	}
	arr[i] = temp ;
}
	
	
	
	
	
	
	
	
	
	
	
	
	
	



